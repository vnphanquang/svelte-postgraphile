"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Account`."""
  accounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition
  ): AccountsConnection

  """Reads and enables pagination through a set of `RoleScope`."""
  roleScopes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoleScope`."""
    orderBy: [RoleScopesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoleScopeCondition
  ): RoleScopesConnection
  account(id: UUID!): Account
  accountByEmail(email: String!): Account
  roleScopeByRole(role: Role!): RoleScope

  """Get current logged-in account identified by JWT"""
  currentAccount: Account

  """Reads a single `Account` using its globally unique `ID`."""
  accountByNodeId(
    """The globally unique `ID` to be used in selecting a single `Account`."""
    nodeId: ID!
  ): Account
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Account` values."""
type AccountsConnection {
  """A list of `Account` objects."""
  nodes: [Account!]!

  """
  A list of edges which contains the `Account` and cursor to aid in pagination.
  """
  edges: [AccountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Account` you could get from the connection."""
  totalCount: Int!
}

"""A registered account"""
type Account implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Id of account"""
  id: UUID!

  """Role type associated with this account"""
  role: Role

  """First name from an account"""
  firstName: String!

  """Last name from an account"""
  lastName: String

  """Unique email of an account"""
  email: String!

  """Timestamp of an account creation"""
  createdAt: Datetime

  """Timestamp of an update to account"""
  updatedAt: Datetime

  """Timestamp of the soft deletion of account"""
  deletedAt: Datetime
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

enum Role {
  USER
  ADMIN
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""A `Account` edge in the connection."""
type AccountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Account` at the end of the edge."""
  node: Account!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `Account`."""
enum AccountsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Account` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AccountCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `email` field."""
  email: String
}

"""A connection to a list of `RoleScope` values."""
type RoleScopesConnection {
  """A list of `RoleScope` objects."""
  nodes: [RoleScope!]!

  """
  A list of edges which contains the `RoleScope` and cursor to aid in pagination.
  """
  edges: [RoleScopesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RoleScope` you could get from the connection."""
  totalCount: Int!
}

type RoleScope {
  role: Role
  scopes: [Scope]
}

enum Scope {
  VISITOR
  MANAGER
}

"""A `RoleScope` edge in the connection."""
type RoleScopesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RoleScope` at the end of the edge."""
  node: RoleScope!
}

"""Methods to use when ordering `RoleScope`."""
enum RoleScopesOrderBy {
  NATURAL
  ROLE_ASC
  ROLE_DESC
}

"""
A condition to be used against `RoleScope` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RoleScopeCondition {
  """Checks for equality with the object’s `role` field."""
  role: Role
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `RoleScope`."""
  createRoleScope(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoleScopeInput!
  ): CreateRoleScopePayload

  """Updates a single `Account` using its globally unique id and a patch."""
  updateAccountByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountByNodeIdInput!
  ): UpdateAccountPayload

  """Updates a single `Account` using a unique key and a patch."""
  updateAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountInput!
  ): UpdateAccountPayload

  """Updates a single `Account` using a unique key and a patch."""
  updateAccountByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountByEmailInput!
  ): UpdateAccountPayload

  """Updates a single `RoleScope` using a unique key and a patch."""
  updateRoleScopeByRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleScopeByRoleInput!
  ): UpdateRoleScopePayload

  """Deletes a single `Account` using its globally unique id."""
  deleteAccountByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountByNodeIdInput!
  ): DeleteAccountPayload

  """Deletes a single `Account` using a unique key."""
  deleteAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountInput!
  ): DeleteAccountPayload

  """Deletes a single `Account` using a unique key."""
  deleteAccountByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountByEmailInput!
  ): DeleteAccountPayload

  """Deletes a single `RoleScope` using a unique key."""
  deleteRoleScopeByRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleScopeByRoleInput!
  ): DeleteRoleScopePayload

  """
  Create a JWT for account identification and authorization with email & password
  """
  authenticate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AuthenticateInput!
  ): AuthenticatePayload

  """Change password of an existing account"""
  changePassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangePasswordInput!
  ): ChangePasswordPayload

  """Register a single account"""
  registerAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterAccountInput!
  ): RegisterAccountPayload
}

"""The output of our create `RoleScope` mutation."""
type CreateRoleScopePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RoleScope` that was created by this mutation."""
  roleScope: RoleScope

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RoleScope`. May be used by Relay 1."""
  roleScopeEdge(
    """The method to use when ordering `RoleScope`."""
    orderBy: [RoleScopesOrderBy!] = [NATURAL]
  ): RoleScopesEdge
}

"""All input for the create `RoleScope` mutation."""
input CreateRoleScopeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RoleScope` to be created by this mutation."""
  roleScope: RoleScopeInput!
}

"""An input for mutations affecting `RoleScope`"""
input RoleScopeInput {
  role: Role
  scopes: [Scope]
}

"""The output of our update `Account` mutation."""
type UpdateAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was updated by this mutation."""
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
}

"""All input for the `updateAccountByNodeId` mutation."""
input UpdateAccountByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Account` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  patch: AccountPatch!
}

"""
Represents an update to a `Account`. Fields that are set will be updated.
"""
input AccountPatch {
  """First name from an account"""
  firstName: String

  """Last name from an account"""
  lastName: String

  """Unique email of an account"""
  email: String

  """Timestamp of the soft deletion of account"""
  deletedAt: Datetime
}

"""All input for the `updateAccount` mutation."""
input UpdateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  patch: AccountPatch!

  """Id of account"""
  id: UUID!
}

"""All input for the `updateAccountByEmail` mutation."""
input UpdateAccountByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  patch: AccountPatch!

  """Unique email of an account"""
  email: String!
}

"""The output of our update `RoleScope` mutation."""
type UpdateRoleScopePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RoleScope` that was updated by this mutation."""
  roleScope: RoleScope

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RoleScope`. May be used by Relay 1."""
  roleScopeEdge(
    """The method to use when ordering `RoleScope`."""
    orderBy: [RoleScopesOrderBy!] = [NATURAL]
  ): RoleScopesEdge
}

"""All input for the `updateRoleScopeByRole` mutation."""
input UpdateRoleScopeByRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RoleScope` being updated.
  """
  patch: RoleScopePatch!
  role: Role!
}

"""
Represents an update to a `RoleScope`. Fields that are set will be updated.
"""
input RoleScopePatch {
  role: Role
  scopes: [Scope]
}

"""The output of our delete `Account` mutation."""
type DeleteAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was deleted by this mutation."""
  account: Account
  deletedAccountNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
}

"""All input for the `deleteAccountByNodeId` mutation."""
input DeleteAccountByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Account` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAccount` mutation."""
input DeleteAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Id of account"""
  id: UUID!
}

"""All input for the `deleteAccountByEmail` mutation."""
input DeleteAccountByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique email of an account"""
  email: String!
}

"""The output of our delete `RoleScope` mutation."""
type DeleteRoleScopePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RoleScope` that was deleted by this mutation."""
  roleScope: RoleScope
  deletedRoleScopeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RoleScope`. May be used by Relay 1."""
  roleScopeEdge(
    """The method to use when ordering `RoleScope`."""
    orderBy: [RoleScopesOrderBy!] = [NATURAL]
  ): RoleScopesEdge
}

"""All input for the `deleteRoleScopeByRole` mutation."""
input DeleteRoleScopeByRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  role: Role!
}

"""The output of our `authenticate` mutation."""
type AuthenticatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwtToken: JwtToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar JwtToken

"""All input for the `authenticate` mutation."""
input AuthenticateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""The output of our `changePassword` mutation."""
type ChangePasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `changePassword` mutation."""
input ChangePasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  currentPassword: String!
  newPassword: String!
}

"""The output of our `registerAccount` mutation."""
type RegisterAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
}

"""All input for the `registerAccount` mutation."""
input RegisterAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  firstName: String!
  email: String!
  lastName: String
  password: String
}
